@startuml
actor Client #green
boundary ProxyServiceApi
control ProxyServiceFactory
entity ProxyService
database app_service
database cache #77EEAA
participant RestApi #99FF99

Client -[#green]> ProxyServiceApi: 客户端接口请求
activate ProxyServiceApi
ProxyServiceApi -[#green]> ProxyServiceFactory: proxy()
activate ProxyServiceFactory
ProxyServiceFactory -[#green]> ProxyService: proxy()
activate ProxyService
ProxyService -[#green]> app_service: findService()
activate app_service
app_service -[#0000ff]-> ProxyService: the service of appName
deactivate app_service
ProxyService -[#red]> cache: fromCache从缓存中取结果(如果配置需要)
activate cache
cache -[#00ff00]-> ProxyService
deactivate cache
ProxyService -[#00ff00]-> ProxyServiceFactory: proxy response
ProxyService -[#green]> ProxyService: 处理创建HttpRequest对象
ProxyService -[#green]> RestApi: HttpClient代理请求真正的后台服务
activate RestApi
RestApi -[#0000ff]-> ProxyService: 返回结果或者产生异常
deactivate RestApi
ProxyService -[#green]> ProxyService: 处理对应的HttpResponse产生ResponseEntity对象
ProxyService -[#red]> cache: cacheResult缓存结果(如何配置需要)
activate cache
cache -[#00ff00]-> ProxyService
deactivate cache
ProxyService -[#0000ff]-> ProxyServiceFactory: proxy response
deactivate ProxyService
ProxyServiceFactory -[#0000ff]-> ProxyServiceApi: response entity
deactivate ProxyServiceFactory
ProxyServiceApi -[#0000ff]-> Client: Proxy Service Result
@enduml

@startuml
package org.itachi.cache {
    interface Cache<K, V> {
        +void delete(K key)
        +boolean hasKey(K key)
        +void set(K key, V value)
        +void set(K key, V value, long timeout, TimeUnit unit)
        +V get(K key)
    }

    class RedisCache {
        -StringRedisTemplate template
        -- 构造函数 --
        +RedisCache(StringRedisTemplate template)
        -- 实现接口方法 --
        +void delete(String key)
        +boolean hasKey(String key)
        +void set(String key, String value)
        +void set(String key, String value, long timeout, TimeUnit unit)
        +String get(String key)
    }

    class CacheConfig {
        .. 属性 ..
        -String filePath
        -Long timeOut
        -TimeUnit timeUnit
        -- getter --
        String getFilePath()
        Long getTimeOut()
        TimeUnit getTimeUnit()
        -- setter --
        void setFilePath(String filePath)
        void setTimeOut(Long timeOut)
        void setTimeUnit(TimeUnit timeUnit)
    }

    RedisCache ..|> Cache
}

package org.itachi.repository {
    interface AbstractMapper<T> {
        +List<T> find(Map<String, Object> parameters)
        +int count(Map<String, Object> parameters)
        +void remove(List<Long> ids)
        +void create(T dto)
        +T findById(Long id)
        +void modify(T dto)
    }

    interface ServiceMapper {
        +ServiceDTO findService(String appName)
    }

    interface CacheMapper {
        +List<CacheDTO> findCaches(Long appId, List<String> paths)
    }

    interface AbstractRepository<T> {
        +List<T> find(Map<String, Object> parameters, Pager pager)
        +void remove(List<Long> ids)
        +void create(T dto)
        +T findById(Long id)
        +void modify(T dto)
    }

    interface ServiceRepository {
        +ServiceDTO findService(String appName)
    }

    abstract class AbstractDatabase<T> {
        -AbstractMapper<T> mapper
        ~void setMapper(AbstractMapper<T> mapper)
        +List<T> find(Map<String, Object> parameters, Pager pager, AbstractMapper<T> mapper)
        +T findById(Long id)
        +void remove(List<Long> ids)
    }

    class ServiceDatabase {
        +ServiceDTO findService(String appName)
        +create(CacheDTO dto)
        +void modify(CacheDTO dto)
    }

    interface CacheRepository {
        +List<CacheDTO> findCaches(Long appId, List<String> paths)
    }

    class CacheDatabase {
        +List<CacheDTO> findCaches(Long appId, List<String> paths)
        +create(CacheDTO dto)
        +void modify(CacheDTO dto)
    }

    ServiceMapper --|> AbstractMapper
    CacheMapper --|> AbstractMapper
    ServiceRepository --|> AbstractRepository
    CacheRepository --|> AbstractRepository
    AbstractDatabase ..|> AbstractRepository
    AbstractDatabase *-- "1" AbstractMapper
    ServiceDatabase --|> AbstractDatabase
    ServiceDatabase ..|> ServiceRepository
    ServiceDatabase *-- "1" ServiceMapper
    CacheDatabase --|> AbstractDatabase
    CacheDatabase ..|> CacheRepository
    CacheDatabase *-- "1" CacheMapper
}

package org.itachi.builder {
    interface ProxyRequestBuilder {
        +HttpRequestBase build()
    }

    abstract class AbstractProxyRequestBuilder {
        #HttpServletRequest request
        -URI uri
        -int connectionRequestTimeout
        -int connectTimeout
        -int socketTimeout
        ~AbstractProxyRequestBuilder(final HttpServletRequest request)
        +AbstractProxyRequestBuilder setUri(final String uri)
        +AbstractProxyRequestBuilder setSocketTimeout(int socketTimeout)
        +AbstractProxyRequestBuilder setConnectTimeout(int connectTimeout)
        +AbstractProxyRequestBuilder setConnectionRequestTimeout(int connectionRequestTimeout)
        +HttpRequestBase build()
        -void makeRequestConfig(RequestBuilder rb)
        #{abstract} void makeRequestHeaders(RequestBuilder rb)
        #{abstract} void makeRequestBody(RequestBuilder rb)
    }

    class DefaultProxyRequestBuilder {
        ~DefaultProxyRequestBuilder(HttpServletRequest request)
        +{static} AbstractProxyRequestBuilder create(final HttpServletRequest request)
        #void makeRequestHeaders(RequestBuilder builder)
        #void makeRequestBody(RequestBuilder builder)
    }

    class TextProxyRequestBuilder {
        -TextProxyRequestBuilder(HttpServletRequest request)
        +{static} AbstractProxyRequestBuilder create(final HttpServletRequest request)
        #void makeRequestBody(RequestBuilder builder)
        -void makeFormBody(RequestBuilder builder)
    }

    class ImageProxyRequestBuilder {
        -ImageProxyRequestBuilder(HttpServletRequest request)
        +{static} AbstractProxyRequestBuilder create(final HttpServletRequest request)
    }

    class DownstreamProxyRequestBuilder {
        -DownstreamProxyRequestBuilder(HttpServletRequest request)
        +{static} AbstractProxyRequestBuilder create(final HttpServletRequest request)
    }

    class UpstreamProxyRequestBuilder {
        -UpstreamProxyRequestBuilder(HttpServletRequest request)
        +{static} AbstractProxyRequestBuilder create(final HttpServletRequest request)
        #void makeRequestHeaders(RequestBuilder builder)
        #void makeRequestBody(RequestBuilder builder)
    }

    interface ProxyResponseBuilder {
        +ResponseEntity build()
    }

    class AbstractProxyResponseBuilder {
        -{static}  String MESSAGE
        -{static} String CODE
        -boolean needHeaders
        -ObjectMapper mapper
        ~HttpResponse response
        ~String fileName
        ~AbstractProxyResponseBuilder(final HttpResponse response)
        +AbstractProxyResponseBuilder setNeedHeaders(final boolean needHeaders)
        +AbstractProxyResponseBuilder setFileName(final String fileName)
        ~ResponseEntity<String> makeErrorResponse(int statusCode)
        #HttpHeaders makeResponseHeaders()
    }

    class DefaultProxyResponseBuilder {
        -DefaultProxyResponseBuilder(HttpResponse response)
        +{static} DefaultProxyResponseBuilder create(final HttpResponse response)
        +ResponseEntity build()
        -String makeResponseBody()
    }

    class TextProxyResponseBuilder {
        -TextProxyResponseBuilder(HttpResponse response)
        +{static} AbstractProxyResponseBuilder create(final HttpResponse response)
        +ResponseEntity build()
        -String makeResponseBody()
    }

    class ImageProxyResponseBuilder {
        -ImageProxyResponseBuilder(HttpResponse response)
        +{static} AbstractProxyResponseBuilder create(final HttpResponse response)
        +ResponseEntity build()
        -byte[] makeResponseBody()
    }

    class DownstreamProxyResponseBuilder {
        -DownstreamProxyResponseBuilder(HttpResponse response)
        +{static} AbstractProxyResponseBuilder create(final HttpResponse response)
        +ResponseEntity build()
        -byte[] makeResponseBody()
        #HttpHeaders makeResponseHeaders()
    }

    class UpstreamProxyResponseBuilder {
        -UpstreamProxyResponseBuilder(HttpResponse response)
        +{static} AbstractProxyResponseBuilder create(final HttpResponse response)
        +ResponseEntity build()
        -String makeResponseBody()
    }

    AbstractProxyRequestBuilder ..|> ProxyRequestBuilder
    DefaultProxyRequestBuilder --|> AbstractProxyRequestBuilder
    TextProxyRequestBuilder --|> DefaultProxyRequestBuilder
    ImageProxyRequestBuilder --|> DefaultProxyRequestBuilder
    DownstreamProxyRequestBuilder --|> DefaultProxyRequestBuilder
    UpstreamProxyRequestBuilder --|> DefaultProxyRequestBuilder
    AbstractProxyResponseBuilder ..|> ProxyResponseBuilder
    DefaultProxyResponseBuilder --|> AbstractProxyResponseBuilder
    TextProxyResponseBuilder --|> AbstractProxyResponseBuilder
    ImageProxyResponseBuilder --|> AbstractProxyResponseBuilder
    DownstreamProxyResponseBuilder --|> AbstractProxyResponseBuilder
    UpstreamProxyResponseBuilder --|> AbstractProxyResponseBuilder
}

package org.itachi.model {
    class CacheFactory {
        -SSOClientOIDCAdapter adapter
        -CacheConfig cacheConfig
        -CacheRepository cacheRepository
        -Cache<String, String> cacheManager
        +AbstractCache create(ServiceType type)
    }

    abstract class AbstractCache {
        .. 静态常量 ..
        ~{static} Logger LOGGER
        ~{static} String HEADERS
        ~{static} String BODY
        -{static} long DEFAULT_TIMEOUT
        -{static} TimeUnit DEFAULT_TIME_UNIT
        .. 属性 ..
        ~Cache<String, String> cacheManager
        ~CacheConfig cacheConfig
        ~ObjectMapper mapper
        -CacheRepository repository
        -long timeOut
        -TimeUnit timeUnit
        -SSOClientOIDCAdapter adapter
        -- 构造函数 --
        ~AbstractCache()
        -- 方法 --
        .. 包内保护方法 ..
        ~AbstractCache setCacheManager(Cache<String, String> cacheManager)
        ~AbstractCache setRepository(CacheRepository repository)
        ~AbstractCache setCacheConfig(CacheConfig cacheConfig)
        ~AbstractCache setAdapter(SSOClientOIDCAdapter adapter)
        ~String cacheKey(HttpServletRequest request, ServiceDTO dto)
        .. 公有方法 ..
        +{abstract} ResponseEntity responseFromCache(HttpServletRequest request, ServiceDTO dto)
        +void cache(BuildCacheEvent event)
        .. 私有方法 ..
        -String getUserNo(String token)
        -boolean formatCacheConfig(String path, Long id)
        -List<CacheDTO> getCacheRules(String path, Long appId)
        -void cacheKey(Long appId, String value)
        -String cacheKey(String uri, String queryString, ServiceDTO dto, String userNo)
        .. 保护方法 ..
        #{abstract} void cacheBody(Map<String, Object> map, BuildCacheEvent event)
    }

    class TextCache {
        +ResponseEntity responseFromCache(HttpServletRequest request, ServiceDTO dto)
        #void cacheBody(Map<String, Object> map, BuildCacheEvent event)
    }

    class ByteCache {
        +ResponseEntity responseFromCache(HttpServletRequest request, ServiceDTO dto)
        #void cacheBody(Map<String, Object> map, BuildCacheEvent event)
    }

    class FileCache {
        +ResponseEntity responseFromCache(HttpServletRequest request, ServiceDTO dto)
        #void cacheBody(Map<String, Object> map, BuildCacheEvent event)
        -String cacheFile(byte[] value, String appName, String fileName)
    }

    enum ServiceType {
        TEXT
        IMAGE
        UPSTREAM
        DOWNSTREAM
        -- 属性 --
        -int code
        -String value
        -- 方法 --
        -ServiceType(int code, String value)
        +int code()
        +String value()
        +{static} ServiceType fromValue(String value)
        +{static} ServiceType fromCode(int code)
    }

    class ProxyServiceFactory {
        -SSOClientOIDCAdapter adapter
        -PoolingHttpClientConnectionManager cm
        -ServiceRepository serviceRepository
        -CacheFactory cacheFactory
        -CommandGateway commandGateway
        +CloseableHttpClient buildHttpClient()
        +AbstractProxyService create(String type)
        -AbstractProxyService createService(ServiceType serviceType, boolean free, boolean cache)
    }

    abstract class AbstractProxyService {
        .. 静态常量 ..
        -{static} String CACHE_HEADER
        .. 属性 ..
        -ServiceType type
        -ServiceRepository serviceRepository
        -SSOClientOIDCAdapter adapter
        -ServiceDTO dto
        -boolean free
        -boolean cache
        -CommandGateway commandGateway
        -CacheFactory cacheFactory
        ~String fileName
        -- 构造函数 --
        +AbstractProxyService(ServiceType type)
        -- 方法 --
        .. 包内保护方法 ..
        ~AbstractProxyService setRepository(final ServiceRepository serviceRepository)
        ~AbstractProxyService setAdapter(final SSOClientOIDCAdapter adapter)
        ~AbstractProxyService setFree(final boolean free)
        ~AbstractProxyService setCache(final boolean cache)
        ~AbstractProxyService setCommandGateway(CommandGateway commandGateway)
        ~AbstractProxyService setCacheFactory(CacheFactory cacheFactory)
        .. 公有方法 ..
        +ResponseEntity proxy(String appName, HttpServletRequest request, CloseableHttpClient httpClient)
        .. 私有方法 ..
        -HttpContext makeRequestCookies(HttpServletRequest request)
        -HttpRequestBase makeRequest(HttpServletRequest request)
        -ResponseEntity makeResponse(HttpResponse proxiedResponse, boolean needHeaders)
        -void cacheResponseEntity(ResponseEntity responseEntity, HttpServletRequest request)
        -ResponseEntity fromCache(HttpServletRequest request)
        -String formatQueryString(HttpServletRequest request)
        -void release(CloseableHttpResponse proxiedResponse, HttpRequestBase proxiedRequest)
        -void verify(HttpServletRequest request, Integer verification)
        -ServiceDTO formatUri(String appName, String uri)
        -String requestInfo(HttpServletRequest request)
        .. 保护方法 ..
        #void verifyRequest(HttpServletRequest request)
        #{abstract} AbstractProxyRequestBuilder makeRequestBuilder(HttpServletRequest request)
        #{abstract} AbstractProxyResponseBuilder makeResponseBuilder(HttpResponse proxiedResponse)
    }

    class TextProxyService {
        -- 构造函数 --
        ~TextProxyService()
        -- 方法 --
        #AbstractProxyRequestBuilder makeRequestBuilder(HttpServletRequest request)
        #AbstractProxyResponseBuilder makeResponseBuilder(HttpResponse proxiedResponse)
    }

    class ImageProxyService {
        -- 构造函数 --
        ~ImageProxyService()
        -- 方法 --
        #AbstractProxyRequestBuilder makeRequestBuilder(HttpServletRequest request)
        #AbstractProxyResponseBuilder makeResponseBuilder(HttpResponse proxiedResponse)
        #void verifyRequest(HttpServletRequest request)
    }

    class DownstreamProxyService {
        -- 构造函数 --
        ~DownstreamProxyService()
        -- 方法 --
        #AbstractProxyRequestBuilder makeRequestBuilder(HttpServletRequest request)
        #AbstractProxyResponseBuilder makeResponseBuilder(HttpResponse proxiedResponse)
        #void verifyRequest(HttpServletRequest request)
    }

    class UpstreamProxyService {
        -- 构造函数 --
        ~UpstreamProxyService()
        -- 方法 --
        #AbstractProxyRequestBuilder makeRequestBuilder(HttpServletRequest request)
        #AbstractProxyResponseBuilder makeResponseBuilder(HttpResponse proxiedResponse)
        #void verifyRequest(HttpServletRequest request)
    }

    CacheFactory o-- "1" AbstractCache
    AbstractCache *-- "1" CacheRepository
    AbstractCache *-- "1" Cache
    AbstractCache *-- "1" CacheConfig
    TextCache --|> AbstractCache
    ByteCache --|> AbstractCache
    FileCache --|> AbstractCache

    ProxyServiceFactory o-- "1" AbstractProxyService
    AbstractProxyService *-- "1" ServiceType
    AbstractProxyService *-- "1" ServiceRepository
    AbstractProxyService *-- "1" CacheFactory
    AbstractProxyService o-- "1" ProxyRequestBuilder
    AbstractProxyService o-- "1" ProxyResponseBuilder
    TextProxyService --|> AbstractProxyService
    ImageProxyService --|> AbstractProxyService
    DownstreamProxyService --|> AbstractProxyService
    UpstreamProxyService --|> AbstractProxyService
}
@enduml

@startuml
start
partition Initialization {
    :根据类型使用工厂方法创建不同的代理服务对象;
    :初始化相关的代理服务对象的属性;
}
partition MakeRequest {
    :从数据库中获取相关的服务dto;
    :验证数据的合法性;
    if (是否需要统一权限验证？) then (true)
        :权限验证;
        if (验证通过？) then (false)
            :返回验证不通过信息;
            stop
        endif
    endif
    if (是否从缓存中获取数据？) then (true)
        :获取缓存数据;
        if (数据为空？) then (false)
            :返回缓存的数据;
            stop
        endif
    endif
    :创建对应的HttpRequest对象;
}
partition execute {
    :使用HttpClient请求代理的后台服务;
}
partition MakeResponse {
    :创建对应的ResponseEntity对象;
    if (是否缓存结果) then (true)
        :缓存结果;
    endif
    :返回ResponseEntity对象;
}
stop
@enduml

@startuml
left to right direction
actor customer
actor adminstrator
rectangle api-gateway {
    customer -- (proxy) : 调用代理服务
    (proxy) -> (service_info) : include
    (service_info) .> (cache_rules) : include
    (service_info) -- adminstrator : 注册代理服务信息
    (cache_rules) -- adminstrator : 录入代理服务缓存规则
}
@enduml

@startuml
package "Builder" {
  [代理Request生成组件]
  [代理Response生成组件]
}

package "Cache" {
  [缓存组件]
}

package "Repository" {
  [缓存规则组件]
  [代理路由规则组件]
}

package "Model" {
  [代理请求组件]
}

[代理请求组件] --> [代理路由规则组件]
[代理请求组件] --> [代理Request生成组件]
[代理请求组件] --> [代理Response生成组件]
[代理请求组件] --> [缓存组件]
[缓存组件] --> [缓存规则组件]
@enduml